{
  "DemandAnalysis": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "ChatDev has made products in the following form before:",
      "Image: can present information in line chart, bar chart, flow chart, cloud chart, Gantt chart, etc.",
      "Document: can present information via .docx files.",
      "PowerPoint: can present information via .pptx files.",
      "Excel: can present information via .xlsx files.",
      "PDF: can present information via .pdf files.",
      "Website: can present personal resume, tutorial, products, or ideas, via .html files.",
      "Application: can implement visualized game, software, tool, etc, via python.",
      "Dashboard: can display a panel visualizing real-time information.",
      "Mind Map: can represent ideas, with related concepts arranged around a core concept.",
      "As the {assistant_role}, to satisfy the new user's demand and the product should be realizable, you should keep discussing with me to decide which product modality do we want the product to be?",
      "Note that we must ONLY discuss the product modality and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion by replying with only one line, which starts with a single word <INFO>, followed by our final product modality without any other words, e.g., \"<INFO> PowerPoint\"."
    ]
  },
  "LanguageChoose": {
    "assistant_role_name": "Chief Technology Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "According to the new user's task and some creative brainstorm ideas listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Ideas: \"{ideas}\".",
      "We have decided to complete the task through a executable software implemented via a programming language. ",
      "As the {assistant_role}, to satisfy the new user's demand and make the software realizable, you should propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc,).",
      "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words or reasons, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language, e.g., \"<INFO> python\"."
    ]
  },
  "Coding": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Task description: \"{description}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas:\"{ideas}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the new user's demands, you should write one or multiple files and make sure that every detail of the architecture is, in the end, implemented as code. {gui}",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.",
      "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "You will start with the \"main\" file, then go to the ones that are imported by that file, and so on.",
      "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
    ]
  },
  "TaskDecomposition": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "According to the new user's task",
      "Task: \"{task}\".",
      "As the {assistant_role}, your task is to extract and list every specific requirement or rule from the **Task** that needs to be checked or reviewed.",
      "Each subtask MUST be an unmodified, original sentence directly from the **Task** description.",
      "Please output the list of subtasks in the following format:",
      "<INFO> [\"subtask1\", \"subtask2\", ... ]"
    ]
  },
  "CodeLocalization": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\".",
      "Codes:",
      "\"{codes}\"",
      "Given the following specific task item that needs to be reviewed:",
      "\"{task_item}\"",
      "As the {assistant_role}, your task is to locate all code snippets in the provided code that are directly relevant to the above task item.",
      "For each relevant code snippet, output strictly in the following format:",
      "",
      "FILENAME",
      "```LANGUAGE",
      "CODE",
      "```",
      "",
      "Where:",
      "- FILENAME: the name of the file (all lowercase, including extension)",
      "- LANGUAGE: programming language for syntax highlighting",
      "- CODE: the relevant code snippet",
      "",
      "If there are multiple relevant snippets in the same file, output each snippet as a separate code block, using the same file name.",
      "If no relevant code is found for the task item, output exactly one line: \"<INFO> Not found\"",
      "Do not add any explanations, comments, or output other than required format."
    ]
  },
  "DetailedTaskReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the new user's task and our software designs:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Given the following specific task item to be reviewed:",
      "\"{task_item}\"",
      "And the following code snippet(s) identified as related to this task item:",
      "\"{code_snippets}\"",
      "As the {assistant_role}, carefully check whether the given code snippet(s) and other relatived codes fully and correctly implement the requirement stated in the task item: \"{task_item}\". You must judge strictly according to the requirement in the task item. Do not make up, infer, or suggest any changes or extensions to the requirement that are not explicitly stated in the task item. Do not propose modifying the specification or adding new event types, behaviors, or formats that are not present in the task item.",
      "When determining 'Unit Test Necessity', you must assess whether the task item is specific and whether the related code contains concrete logic. if the task item is concrete and the code implements substantial logic, indicate 'True' for unit test necessity; otherwise, indicate 'False'.",
      "ATTENTION: Use '##' to SPLIT SECTIONS, not '#'. Output format carefully referenced \"Output Format\".",
      "# Output Format",
      "Your response must strictly follow the format below:",
      "## Code Review Comment",
      "...",
      "## Code Review Result",
      "PASS/FAIL",
      "## Unit Test Necessity",
      "True/False"
    ]
  },
  "DetailedTaskReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
    ]
  },
  "ArtDesign": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), we will discuss and design many decorative images for GUI decoration. Now, we keep discussing the GUI beautification by listing some functionally independent elements in GUI that are being considered to be decorated by different pictures. For example, ten digits (0-9) in a calculator are functionally independent.",
      "To answer, use the format: \" FILENAME.png: DESCRIPTION\" where \"FILENAME\" is the filename of the image and \"DESCRIPTION\" denotes the detailed description of the independent elements. For example:",
      "'''",
      "button_1.png: The button with the number \"1\" on it.",
      "button_multiply.png: The button with the multiplication symbol (\"*\") on it.",
      "background.png: the background color to decorate the Go game",
      "'''",
      "Now, list all functionally independent elements as much as possible."
    ]
  },
  "ArtIntegration": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), you will incorporate our designed images for GUI decoration. Here are some ready-made high-quality pictures and corresponding descriptions:",
      "{images}",
      "Note that the designed images have a fixed size of 256x256 pixels and the images are located in the same directory as all the Python files; please dynamically scaling these images according to the size of GUI, and use \"self.*\" to avoid displaying-related problems caused by automatic garbage collection. For example:",
      "```",
      "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
      "```",
      "Now, use some or all of the pictures into the GUI to make it more beautiful and creative. Output codes strictly following the required format mentioned above."
    ]
  },
  "CodeComplete": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Unimplemented File:",
      "\"{unimplemented_file}\"",
      "In our software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the complete function of our developed software, you have to implement all methods in the {unimplemented_file} file which contains a unimplemented class. Now, implement all methods of the {unimplemented_file} and all other codes needed, then output the fully implemented codes, strictly following the required format."
    ]
  },
  "CodeReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the new user's task and our software designs: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes:",
      "\"{codes}\"",
      "As the {assistant_role}, to make the software directly operable without further coding, ChatDev have formulated the following regulations:",
      "1) all referenced classes should be imported;",
      "2) all methods should be implemented;",
      "3) all methods need to have the necessary comments;",
      "4) no potential bugs;",
      "5) The entire project conforms to the tasks proposed by the user;",
      "6) most importantly, do not only check the errors in the code, but also the logic of code. Make sure that user can interact with generated software without losing any feature in the requirement;",
      "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "SimpleTaskReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the user's specific task requirements and the provided code implementation:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "As the {assistant_role}, to ensure the code fully meets the Task, please review according to the following regulations:",
      "1) Check one by one whether each functional requirement stated in the Task is completely implemented;",
      "2) Check whether the logging functionality records key operations and status changes in detail, and follows specified formats in the Task (if applicable);",
      "3) Ensure the business logic and operational steps strictly follow the Task's descriptions;",
      "4) Ensure the code does not add, omit, or alter any functionality beyond what is described in the Task.",
      "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "SimpleTaskReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
    ]
  },
  "AnalyzeDependencies": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "## Context",
      "### Caller File: {caller_rel_fname}",
      "```Code",
      "{caller_code}",
      "```",
      "### Callee File: {callee_rel_fname}",
      "```Code",
      "{callee_code}",
      "```",
      "### Code Snippets to Analyze:",
      "{combined_snippets}",
      "Please analyze the dependency relationships between the caller file and the callee file, focusing on the provided code snippets.",
      "-----",
      "## format example",
      "[CONTENT]",
      "[",
      "    {{",
      "        \"dependency_type\": \"method_call\",",
      "        \"function\": \"processPayment\",",
      "        \"contract\": {{",
      "            \"input_parameters\": {{",
      "                \"amount\": \"int\",",
      "                \"currency\": \"string\",",
      "                \"user_id\": \"string\"",
      "            }},",
      "            \"return_values\": {{",
      "                \"transaction_id\": \"string\",",
      "                \"status\": \"enum(success, pending, failed)\",",
      "                \"timestamp\": \"datetime\"",
      "            }},",
      "            \"expectations\": \"Logs transaction details to audit system\"",
      "        }}",
      "    }}",
      "]",
      "[/CONTENT]",
      "",
      "## nodes: \"<node>: <type>  # <instruction>\"",
      "- dependency_type: <class 'str'>  # Specify the type of dependency between components.",
      "- function: <class 'str'>  # The specific function/method involved in this dependency.",
      "- contract: <class 'dict'>  # Describe the interface contract between the components, including parameters, return values, and expectations.",
      "",
      "## Output Format",
      "Please generate a list containing objects where each object has ALL the requested fields combined. Do NOT split fields into separate objects. Follow the structure shown in the example.",
      "",
      "## constraint",
      "Format: output wrapped inside [CONTENT][/CONTENT] like format example, nothing else.",
      "",
      "## action",
      "Follow instructions of nodes, generate output and make sure it follows the format example."
    ]
  },
  "EnhancedCodeReview": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "# System",
      "Task: Evaluate whether the provided code meets quality standards, adheres to requirements, and maintains proper dependency relationships.",
      "ATTENTION: Use '##' to SPLIT SECTIONS, not '#'. Output format carefully referenced \"Output Format\".",
      "",
      "# Context",
      "## Original user requirement",
      "{user_requirement}",
      "",
      "## Dependency context",
      "{dependency_context}",
      "",
      "## Relative Code",
      "{relative_code}",
      "",
      "# Code to be Reviewed",
      "```Code",
      "{code}",
      "```",
      "",
      "# Output Format",
      "Based on the \"Code to be Reviewed\", your response must contain the following sections:",
      "## Requirement Compliance",
      "Identify EXPLICIT conflicts between the code and the original user requirement.",
      "## Dependency Consistency",
      "Evaluate if the code properly handles dependencies and maintains contracts with other files.",
      "## Code Quality Assessment",
      "Ordered List. Based on the \"Code to be Reviewed\", provide key, clear, concise, and specific answer. If any answer is no, explain how to fix it step by step.",
      "1. Is the code implemented as per the requirements? If not, how to achieve it? Analyse it step by step.",
      "2. Is the code logic completely correct? If there are errors, please indicate how to correct them.",
      "3. Are all functions implemented? If there is no implementation, please indicate how to achieve it step by step.",
      "4. Have all necessary pre-dependencies been imported? If not, indicate which ones need to be imported",
      "5. Are methods from other files being reused correctly?",
      "## Code Review Result",
      "Contain ONLY \"PASS\" or \"FAIL\". If any of the checks (Requirement Compliance, Dependency Consistency, or Code Quality Assessment) show issues, mark as FAIL. Otherwise, mark as PASS.",
      "## Overall Conclusion",
      "Summarize the review based on all previous sections. If the Code Review Result is FAIL, please provide specific improvement suggestions.",
      "## Actions",
      "Ordered List. Things that should be done if Code Review Result is FAIL, such as implementing class A and function B. Please provide specific code snippets for each action.",
      "",
      "# Format Example",
      "## Requirement Compliance",
      "The code directly conflicts with the requirement regarding... / No explicit conflicts found.",
      "",
      "## Dependency Consistency",
      "The code breaks dependency contracts by... / All dependency relationships are properly maintained.",
      "",
      "## Code Quality Assessment",
      "1. No, we should fix the logic of class A due to ...",
      "2. ...",
      "3. No, function B is not implemented, ...",
      "4. ...",
      "5. ...",
      "",
      "## Code Review Result",
      "FAIL / PASS",
      "",
      "## Overall Conclusion",
      "...",
      "",
      "## Actions",
      "1. Fix the `handle_events` method to update the game state only if a move is successful.",
      "  ```python",
      "  def handle_events(self):",
      "      for event in pygame.event.get():",
      "          if event.type == pygame.QUIT:",
      "              return False",
      "          if event.type == pygame.KEYDOWN:",
      "              moved = False",
      "              if event.key == pygame.K_UP:",
      "                  moved = self.game.move('UP')",
      "              elif event.key == pygame.K_DOWN:",
      "                  moved = self.game.move('DOWN')",
      "              elif event.key == pygame.K_LEFT:",
      "                  moved = self.game.move('LEFT')",
      "              elif event.key == pygame.K_RIGHT:",
      "                  moved = self.game.move('RIGHT')",
      "              if moved:",
      "                  # Update the game state only if a move was successful",
      "                  self.render()",
      "      return True",
      "  ```",
      "2. ..."
    ]
  },
  "CodeReviewSummary": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the new user's task and our software designs:",
      "",
      "Task: \"{task}\"",
      "Modality: \"{modality}\"",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "",
      "Codes:",
      "\"{codes}\"",
      "",
      "Previous Code Review Comments:",
      "\"{previous_reviews}\"",
      "",
      "As the {assistant_role}, your job is to conduct a **comprehensive final review** of the above code, integrating all previous reviewers’ suggestions and focusing on making the software directly operable without further coding. ChatDev has formulated the following mandatory criteria:",
      "1) all referenced classes should be imported;",
      "2) all methods should be implemented;",
      "3) all methods need to have the necessary comments;",
      "4) no potential bugs;",
      "5) The entire project conforms to the tasks proposed by the user;",
      "6) most importantly, do not only check the errors in the code, but also the logic of code. Make sure that user can interact with generated software without losing any feature in the requirement;",
      "Now, you should check the above regulations one by one and review the codes in detail based on the previous review, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "ReviewOnReview": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task and our software designs: ",
      "Task: \"{task}\".",
      "",
      "Codes:",
      "{codes}",
      "",
      "As Code Reviewers, you and I have both reviewed this code before to ensure that the code can run successfully in one go, among which:",
      "My previous review results for the code are as follows:",
      "{review_comments}",
      "",
      "Your previous review results for the code are as follows:",
      "{review_comments_summary}",
      "In order to meet the users's demand, you should continue to discuss with me to reach a consensus on the code review.",
      "Note that we must ONLY discuss the code review and do not discuss anything else! If there are disagreements in our previous code review results, we should think step by step and summarize the better review results. Once we have both expressed our opinion(s) and agreed on the results of the discussion unanimously, either of us must take the initiative to terminate the discussion, and the reply should start with <INFO>, followed by our consensus and detailed code review results.",
      "If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "ReviewConsensus": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task and our software designs: ",
      "Task: \"{task}\".",
      "",
      "Codes:",
      "{codes}",
      "",
      "As Code Reviewers, I have reviewed this code before to ensure that the code can run successfully in one go.",
      "My previous review results for the code are as follows:",
      "{review_comments}",
      "",
      "In order to meet the users's demand, you should continue to discuss with me to reach a consensus on the code review.",
      "Note that we must ONLY discuss the code review and do not discuss anything else! If you do not completely agree with the previous code review results, we should think step by step and summarize better review results. Once we have both expressed our opinion(s) and agreed on the results of the discussion unanimously, either of us must take the initiative to terminate the discussion, and the reply should start with <INFO>, followed by our consensus and detailed code review results (contains specific improvement measures).",
      "If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "EnhancedCodeReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
    ]
  },
  "CodeReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
    ]
  },
  "TestErrorSummary": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "According to my test reports, please locate and summarize the bugs that cause the problem."
    ]
  },
  "UnitTestDetermination": {
    "assistant_role_name": "Software Test Engineer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "As the {assistant_role}, your task is to analyze the provided code files and identify which modules, classes, or functions contain critical algorithmic logic that should be tested. Focus on areas involving data processing, business logic, or complex algorithms.",
      "Files primarily concerned with UI or those without significant logic should not be considered for unit testing.",
      "Please output a list of files that require unit tests. The output should be in the following format:",
      "<INFO> [\"file1.py\", \"file2.py\", ... ]"
    ]
  },
  "UnitTestCoding": {
    "assistant_role_name": "Software Test Engineer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Given the following specific task item to be tested:",
      "\"{task_item}\"",
      "And the following code snippet(s) identified as related to this task item:",
      "\"{code_snippets}\"",
      "As the {assistant_role}, in order to ensure the correctness of the specified code, please focus exclusively on writing unit tests for the above specific task item.",
      "You are required to write unit tests only for the given \"{task_item}\"; do not consider any other task items.",
      "Import the concrete implementations to be tested directly from the source code.",
      "Most importantly, keep the unit test code as simple as possible to ensure there are no logical errors in the test code itself."
    ]
  },
  "UnitTestCodeReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "According to the new user's task and our software designs: ",
      "Task: \"{task}\"",
      "Programming Language: \"{language}\"",
      "Our developed source code and corresponding unit test code are as follows:",
      "Source Code:",
      "```code",
      "{code}",
      "```",
      "Unit Test Code:",
      "```code",
      "{unit_test_code}",
      "```",
      "As the {assistant_role}, your task is to review the provided unit test code for logical correctness. Ensure that the unit tests cover the core functionality of the source code, test all edge cases, and handle possible errors or exceptions correctly. Also, verify that the test assertions are meaningful and aligned with the source code behavior.",
      "If you find any issues with the logic or coverage of the unit test, provide clear comments and suggestions for improvement. If everything is correct, return only one line like \"<INFO> Finished\"."
      ]
  },
  "UnitTestCodeReviewModification": {
    "assistant_role_name": "Software Test Engineer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task and our software designs: ",
      "Task: \"{task}\"",
      "Programming Language: \"{language}\"",
      "Our developed source code and corresponding unit test code are as follows:",
      "Source Code:",
      "```code",
      "{code}",
      "```",
      "Unit Test Code:",
      "```code",
      "{unit_test_code}",
      "```",
      "Comments on Unit Test Code:",
      "\"{comments}\"",
      "As the {assistant_role}, your task is to modify the unit test code based on the comments provided. Review the comments carefully and ensure that the unit tests are improved by addressing any gaps, fixing issues, or enhancing coverage. Modify the test code accordingly and ensure it follows the best practices. Output the modified unit test code in the following format:",
      "{unit_test_filename}",
      "```{language}",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```"
    ]
  },
  "UnitTestExecution": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "According to the new user's task and our software designs:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Given the following specific task item to be tested:",
      "\"{task_item}\"",
      "And the following code snippet(s) identified as related to this task item:",
      "\"{code_snippets}\"",
      "Our unit test code for the above subtask item is as follows:",
      "```{language}",
      "{unit_test_code}",
      "```",
      "The unit test report is as follows:",
      "{unit_test_report}",
      "As the {assistant_role}, please analyze the test report and identify and summarize the source of each problem.",
      "For each failed test case, use mathematical or logical reasoning based on the task description to step-by-step confirm whether the root cause of failure lies in the source code or in the unit test code.",
      "After your analysis, please modify the relevant implementation according to your reasoning.",
      "ATTENTION: Use '##' to SPLIT SECTIONS, not '#'. Output format carefully referenced \"Output Format\".",
      "# Output Format",
      "Your response must strictly follow the format below:",
      "## Analysis",
      "...",
      "## Problem Source",
      "Source Code / Unit Test Code",
      "## Code Modification",
      "..."
    ]
  },
  "UnitTestModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "According to the new user's task and our software designs:",
      "Task: \"{task}\"",
      "Programming Language: \"{language}\"",
      "Our developed source codes and corresponding test reports are listed below: ",
      "Source Code:",
      "FILENAME: {filename}",
      "```{language}",
      "{code}",
      "```",
      "Unit Test Code:",
      "FILENAME: {unit_test_filename}",
      "```{language}",
      "{unit_test_code}",
      "```",
      "Test Report of Source Codes:",
      "\"{unit_test_report}\"",
      "Error Summary of Test Report:",
      "\"{unit_test_summary}\"",
      "",
      "In the software, the file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME: \"{filename}\" / \"{unit_test_filename}\" (depending on whether the problematic code is from the source code or the unit test code)",
      "```{language}",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, your task is to modify the code based on the error summary from the test report. Let's think step by step to review the test report and error summary, then identify and fix the problematic code. Return all codes strictly following the required format."
    ]
  },
  "CodeUpdateReview": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the new user's task, our developed first-edition source codes, comments on codes, and code updates are listed below: ",
      "Task: \"{task}\".",
      "Previous Source Codes:",
      "\"{previous_codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "Code Updates:",
      "\"{diff}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to make the software directly operable without further coding, ChatDev have formulated the following regulations:",
      "1) Check whether the code updates have completely resolved all issues mentioned in the Comments on Codes;",
      "2) Check whether the code updates have introduced any new problems, bugs, or deviations from the Task;",
      "If all previous issues are solved and no new problems are introduced after this code update, return only one line: \"<INFO> Finished\". Otherwise, please explain what problems exist in this code update, and then revise the code to resolve all identified issues and return all corrected codes strictly following the required format."
    ]
  },
  "TestModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify the codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the error summary. Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
    ]
  },
  "EnvironmentDoc": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "The new user's task and our developed codes are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "As the {assistant_role}, you should write a requirements.txt file, which is commonly used in Python projects to specify the dependencies or packages required for the project to run properly. It serves as a way to document and manage the project's dependencies in a standardized format. For example:",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "According to the codes and file format listed above, write a requirements.txt file to specify the dependencies or packages required for the project to run properly."
    ]
  },
  "Manual": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "The new user's task, our developed codes and required dependencies are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Requirements:",
      "\"{requirements}\"",
      "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the software, including introducing main functions of the software, how to install environment dependencies and how to use/play it. For example:",
      "manual.md",
      "```",
      "# LangChain",
      "Building applications with LLMs through composability",
      "Looking for the JS/TS version? Check out LangChain.js.",
      "**Production Support:** As you move your LangChains into production, we'd love to offer more comprehensive support.",
      "Please fill out this form and we'll set up a dedicated support Slack channel.",
      "## Quick Install",
      "`pip install langchain`",
      "or",
      "`conda install langchain -c conda-forge`",
      "## 🤔 What is this?",
      "Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.",
      "This library aims to assist in the development of those types of applications. Common examples of these applications include:",
      "**❓ Question Answering over specific documents**",
      "- Documentation",
      "- End-to-end Example: Question Answering over Notion Database",
      "**🤖 Agents**",
      "- Documentation",
      "- End-to-end Example: GPT+WolframAlpha",
      "## 📖 Documentation",
      "Please see [here](https://python.langchain.com) for full documentation on:",
      "- Getting started (installation, setting up the environment, simple examples)",
      "- How-To examples (demos, integrations, helper functions)",
      "- Reference (full API docs)",
      "- Resources (high-level explanation of core concepts)",
      "```"
    ]
  },
  "ModificationPlanGeneration": {
    "assistant_role_name": "Chief Technology Officer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task and our software designs:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "After the team conducted comprehensive code review and unit testing of all subtasks, the issues are summarized as follows:",
      "\"{evidence}\"",
      "As the {assistant_role}, please generate a single, coherent, and conflict-free Consolidated Modification Plan based on the above code review and testing reports.",
      "Please analyze each subtask one by one, refer to both the code review and unit test results, eliminate any potential conflicts from different sources, and form a unified modification plan.",
      "Focus exclusively on providing the modification plan for the source code only; do not include plans for test code, documentation, or any other files.",
      "The final Consolidated Modification Plan should be a clear, step-by-step instruction prompt.",
      "ATTENTION: Use '##' to SPLIT SECTIONS, not '#'. Output format carefully referenced \"Output Format\".",
      "# Output Format",
      "Your reply must strictly follow the format below. If you need to modify multiple files, provide multiple steps, each following the same format.",
      "## Step X (X is a number representing the step number)",
      "### Filename to be modified",
      "filename.suffix",
      "### Comprehensive Analysis",
      "... (Based on the team reports, provide your analysis of the code to be modified)",
      "### Specific Modifications",
      "... (List the specific code modifications to be made, point by point)"
    ]
  },
  "UnitTestCodeModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task and our software designs:",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Given the following specific task item to be reviewed:",
      "\"{task_item}\"",
      "And the following code snippet(s) identified as related to this task item:",
      "\"{code_snippets}\"",
      "We wrote unit tests for the specific subtasks above:",
      "```{language}",
      "{unit_test_code}",
      "```",
      "The unit test report and analysis is as follows:",
      "{unit_test_analysis}",
      "As the {assistant_role}, Please modify the above unit test code according to the report and analysis, and return the modified complete unit test code."
    ]
  },
  "UnifiedCodeModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes: ",
      "\"{codes}\"",
      "Modification Plan on Codes:",
      "\"{modification_plan}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" is the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the Modification Plan. Then, output the full and complete codes with all bugs fixed based on the Modification Plan. Return all codes strictly following the required format."
    ]
  }
}